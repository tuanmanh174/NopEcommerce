@model CustomerAddressListModel

@{
    Layout = "_ColumnsTwo";

    //title
    NopHtml.AddTitleParts(T("PageTitle.Account").Text);
    //page class
    NopHtml.AppendPageCssClassParts("html-account-page");
    NopHtml.AppendPageCssClassParts("html-address-list-page");
}

@*page title*@
@section Breadcrumb
{
    <div class="page-title">
        <div class="container">
            <div class="content">
                <h1>@T("Account.MyAccount") - @T("Account.CustomerAddresses")</h1>
            </div>
        </div>
    </div>
}

@section left
{
    @await Component.InvokeAsync(typeof(CustomerNavigationViewComponent), new { selectedTabId = CustomerNavigationEnum.Addresses })
}
<div class="page account-page address-list-page">
    <div class="page-body">
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.CustomerAddressesTop, additionalData = Model })
        @if (Model.Addresses.Count > 0)
        {
            <div class="address-list">
                <div class="row">
                    @for (var i = 0; i < Model.Addresses.Count; i++)
                    {
                        var address = Model.Addresses[i];
                        <div class="section col-12 col-sm-12 col-md-6 col-lg-6 col-xl-4">
                            <div class="address-item">
                                <div class="title">
                                    <strong>@address.FirstName @address.LastName</strong>
                                </div>
                                <div class="address-info">
                                    <ul class="info">
                                        <li class="email">
                                            <label>@T("Address.Fields.Email"):</label>
                                            @address.Email
                                        </li>
                                        @if (address.PhoneEnabled)
                                        {
                                            <li class="phone">
                                                <label>@T("Address.Fields.PhoneNumber"):</label>
                                                @address.PhoneNumber
                                            </li>
                                        }
                                        @if (address.FaxEnabled)
                                        {
                                            <li class="fax">
                                                <label>@T("Address.Fields.FaxNumber"):</label>
                                                @address.FaxNumber
                                            </li>
                                        }
                                        @if (address.CompanyEnabled && !string.IsNullOrEmpty(address.Company))
                                        {
                                            <li class="company">@address.Company</li>
                                        }
                                        @foreach (var item in address.AddressFields)
                                        {
                                            <li class=@item.Key.ToString().ToLower()>@item.Value</li>

                                        }
                                        @if (!string.IsNullOrEmpty(address.FormattedCustomAddressAttributes))
                                        {
                                            <li class="custom-attributes-view">
                                                @Html.Raw(address.FormattedCustomAddressAttributes)
                                            </li>
                                        }
                                    </ul>
                                    <div class="buttons">
                                        <button type="button" class="button-2 btn btn-primary edit-address-button mr-1" onclick="location.href = '@(Url.RouteUrl("CustomerAddressEdit", new {addressId = address.Id}))'">@T("Common.Edit")</button>
                                        <button type="button" class="button-2 btn btn-default delete-address-button" onclick="deletecustomeraddress(@(address.Id))">@T("Common.Delete")</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
            <script asp-location="Footer">
                function deletecustomeraddress(addressId) {
                    if (confirm('@T("Common.AreYouSure")')) {
                        var postData = {
                            addressId: addressId
                        };
                        addAntiForgeryToken(postData);

                        $.ajax({
                            cache: false,
                            type: 'POST',
                            url: "@Url.RouteUrl("CustomerAddressDelete")",
                            data: postData,
                            dataType: 'json',
                            success: function(data) {
                                location.href = data.redirect;
                            },
                            error: function(xhr, ajaxOptions, thrownError) {
                                alert('Failed to delete');
                            }
                        });
                    }
                }
            </script>
        }
        else
        {
            <div class="no-data">
                @T("Account.CustomerAddresses.NoAddresses")
            </div>
        }
        <div class="add-button">
            <button type="button" class="button-1 btn btn-primary add-address-button" onclick="location.href='@Url.RouteUrl("CustomerAddressAdd")'">@T("Common.AddNew")</button>
        </div>
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.CustomerAddressesBottom, additionalData = Model })
    </div>
</div>