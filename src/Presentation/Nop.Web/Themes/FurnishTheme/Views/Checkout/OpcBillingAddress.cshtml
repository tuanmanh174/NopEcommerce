@model CheckoutBillingAddressModel
@using Nop.Core;
@inject IWebHelper webHelper

@{
    var storeLocation = webHelper.GetStoreLocation();
}

<div class="checkout-data">
    @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.OpCheckoutBillingAddressTop, additionalData = Model })
    @if (Model.ShipToSameAddressAllowed)
    {
        <div class="section ship-to-same-address">
            <div class="custom-control custom-checkbox">
                <input asp-for="ShipToSameAddress" type="checkbox" class="custom-control-input" id="ShipToSameAddress" />
                <label class="custom-control-label" for="ShipToSameAddress">@T("Checkout.ShipToSameAddress")</label>
            </div>
        </div>
    }
    @if (Model.ExistingAddresses.Count > 0)
    {
        <div class="section select-billing-address">
            <label for="billing-address-select">@T("Checkout.SelectBillingAddressOrEnterNewOne")</label>
            @if (Model.InvalidExistingAddresses.Count > 0)
            {
                <label class="min-amount-warning">
                    @string.Format(T("Checkout.Addresses.Invalid").Text, Model.InvalidExistingAddresses.Count)
                </label>
            }
            <div class="row">
                <div class="col-md-6 col-lg-6 mx-auto">
                    <select name="billing_address_id" id="billing-address-select" class="address-select form-control mx-auto"
                            title="" onchange="Billing.resetBillingForm();Billing.setDefaultCountry(@(Model.BillingNewAddress.DefaultCountryId??0));Billing.newAddress(!this.value)">
                        @foreach (var address in Model.ExistingAddresses)
                        {
                            var addressLine = "";
                            addressLine += address.FirstName;
                            addressLine += " " + address.LastName;
                            addressLine += ", " + address.AddressLine;
                            //how should we render "FormattedCustomAddressAttributes" here?
                            <option value="@(address.Id)">@(addressLine)</option>
                        }
                        <option value="" selected="@Model.NewAddressPreselected">@T("Checkout.NewAddress")</option>
                    </select>
                </div>
            </div>
        </div>
    }
    @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.OpCheckoutBillingAddressMiddle, additionalData = Model })
    <div class="section new-billing-address" id="billing-new-address-form">
        <div class="enter-address">
            <div asp-validation-summary="ModelOnly" class="message-error"></div>
            @{
                var dataDictAddress = new ViewDataDictionary(ViewData);
                dataDictAddress.TemplateInfo.HtmlFieldPrefix = "BillingNewAddress";
                @await Html.PartialAsync("_CreateOrUpdateAddress", Model.BillingNewAddress, dataDictAddress)
            }
            @if (Model.EuVatEnabled)
            {  
                <div class="row">
                    <div class="inputs col-12 col-sm-12 col-md-6 col-lg-6 col-xl-6">
                        <label asp-for="VatNumber" asp-postfix=":"></label>
                        @if (Model.EuVatEnabledForGuests)
                        {
                            <input asp-for="VatNumber" placeholder="Vat number" class="form-control" />
                            <span asp-validation-for="VatNumber"></span>
                        }
                        else
                        {
                            <span class="vat-number-warning">
                                @T("Checkout.VatNumber.Disabled", Url.RouteUrl("CustomerInfo"))
                            </span>
                        }
                    </div>
                </div>
            }
        </div>
    </div>
    @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.OpCheckoutBillingAddressBottom, additionalData = Model })
</div>
