@{
    Layout = "_Root";
}
@{
    //current category ID
    var currentCategoryId = 0;
    if (Url.ActionContext.RouteData.Values["controller"].ToString().Equals("catalog", StringComparison.InvariantCultureIgnoreCase) &&
        Url.ActionContext.RouteData.Values["action"].ToString().Equals("category", StringComparison.InvariantCultureIgnoreCase))
    {
        currentCategoryId = Convert.ToInt32(Url.ActionContext.RouteData.Values["categoryId"].ToString());
    }


    //current manufacturer ID
    var currentManufacturerId = 0;
    if (Url.ActionContext.RouteData.Values["controller"].ToString().Equals("catalog", StringComparison.InvariantCultureIgnoreCase) &&
        Url.ActionContext.RouteData.Values["action"].ToString().Equals("manufacturer", StringComparison.InvariantCultureIgnoreCase))
    {
        currentManufacturerId = Convert.ToInt32(Url.ActionContext.RouteData.Values["manufacturerId"].ToString());
    }


    //current product ID
    var currentProductId = 0;
    if (Url.ActionContext.RouteData.Values["controller"].ToString().Equals("product", StringComparison.InvariantCultureIgnoreCase) &&
        Url.ActionContext.RouteData.Values["action"].ToString().Equals("productdetails", StringComparison.InvariantCultureIgnoreCase))
    {
        currentProductId = Convert.ToInt32(Url.ActionContext.RouteData.Values["productId"].ToString());
    }
}

@await RenderSectionAsync("Breadcrumb", false)
<div class="row">
    <div class="center-2 col-xs-12 col-sm-12 col-md-12 col-lg-8 col-xl-9">
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = "main_column_before" })
        @RenderBody()
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = "main_column_after" })
    </div>
    <div class="side-2 col-xs-12 col-sm-12 col-md-12 col-lg-4 col-xl-3">
        @if (IsSectionDefined("left"))
        {
            @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.LeftSideColumnBefore })
            @await RenderSectionAsync("left")
            @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.LeftSideColumnAfter })
        }
        else
        {
            @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = "left_side_column_before" })
            @await RenderSectionAsync("CatalogFilters", false);
            @await Component.InvokeAsync(typeof(CategoryNavigationViewComponent), new { currentCategoryId = currentCategoryId, currentProductId = currentProductId })
            @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = "left_side_column_after_category_navigation" })
            @await Component.InvokeAsync(typeof(ManufacturerNavigationViewComponent), new { currentManufacturerId = currentManufacturerId })
            @await Component.InvokeAsync(typeof(VendorNavigationViewComponent))
            @await Component.InvokeAsync(typeof(RecentlyViewedProductsBlockViewComponent), new { productThumbPictureSize = 64 })
            @await Component.InvokeAsync(typeof(PopularProductTagsViewComponent))
            @await Component.InvokeAsync(typeof(PollBlockViewComponent), new { systemKeyword = "LeftColumnPoll" })
            @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = "left_side_column_after" })
        }
    </div>
</div>