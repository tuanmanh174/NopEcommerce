@model MiniShoppingCartModel
@using Nop.Core.Domain.Catalog

<div id="flyout-cart" class="flyout-minicart overlay-event mobile-overlay">
    <div class="cd-cart">
        <div class="title-section">
            <span>@T("checkout.progress.cart")</span>
            <div class="close"><i class="far fa-times"></i></div>
        </div>       
        <div class="flyout-cart">
            <div class="count">
                @if (Model.TotalProducts == 0)
                {
                    @T("ShoppingCart.Mini.NoItems")
                }
                else
                {
                    @Html.Raw(string.Format(T("ShoppingCart.Mini.ItemsText").Text, $"<a href=\"{Url.RouteUrl("ShoppingCart")}\">{string.Format(T("ShoppingCart.Mini.Items").Text, Model.TotalProducts)}</a>"))
                }
            </div>
            @if (Model.TotalProducts > 0)
            {
                <div class="items">
                    @for (var i = 0; i < Model.Items.Count; i++)
                    {
                        var item = Model.Items[i];
                    <div id="flyout-item@(item.Id)" class="item @(i == 0 ? "first" : null)">
                        @*<a onclick="removeFlyoutCartItem(@item.ProductId)" class="item-remove"></a>*@
                        @if (Model.ShowProductImages)
                        {
                            <div class="picture">
                                    <a href="@(Url.RouteUrl<Product>(new { SeName = item.ProductSeName }))" title="@item.Picture.Title">
                                    <img alt="@item.Picture.AlternateText" src="@item.Picture.ImageUrl" title="@item.Picture.Title" />
                                </a>
                            </div>
                        }
                        <div class="product">
                            <div class="name">
                                <a href="@(Url.RouteUrl<Product>(new { SeName = item.ProductSeName }))">@item.ProductName</a>
                            </div>
                            @*@{
                                var productSKU = productService.GetProductById(item.ProductId)?.Sku;
                            }*@
                            @if (!string.IsNullOrEmpty(item.AttributeInfo))
                            {
                                <div class="attributes">
                                    @Html.Raw(item.AttributeInfo)
                                </div>
                            }
                            <div class="quantity">@T("ShoppingCart.Mini.Quantity"): <span>@item.Quantity</span></div>
                            <div class="price">@T("ShoppingCart.Mini.UnitPrice"): <span>@item.UnitPrice</span></div>
                        </div>
                    </div>
                    }
                </div>
                <div id="flyoutCartTotalBottom" class="cart-total-bottom">
                    <div class="totals">@T("ShoppingCart.Totals.SubTotal")<span id="flyoutCartTotal">@Model.SubTotal</span></div>
                    <div class="buttons">
                        @if (Model.DisplayCheckoutButton)
                        {
                            var checkoutUrl = "";
                            if (Model.AnonymousCheckoutAllowed && Model.CurrentCustomerIsGuest)
                            {
                                checkoutUrl = Url.RouteUrl("LoginCheckoutAsGuest", new { returnUrl = Url.RouteUrl("ShoppingCart") });
                            }
                            else
                            {
                                checkoutUrl = Url.RouteUrl("Checkout");
                            }
                            <button type="button" class="button-2 btn btn-primary checkout-button remove-box-shadow" onclick="setLocation('@checkoutUrl')">@T("Checkout.Button")</button>
                        }
                        @if (Model.DisplayShoppingCartButton)
                        {
                            <button type="button" class="button-1 btn btn-default cart-button remove-box-shadow" onclick="setLocation('@(Url.RouteUrl("ShoppingCart"))')">@T("ShoppingCart.Mini.ViewCart")</button>
                        }
                    </div>
                </div>
            }
        </div>
    </div>
</div>