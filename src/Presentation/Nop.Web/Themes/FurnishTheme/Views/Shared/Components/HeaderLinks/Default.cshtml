@model HeaderLinksModel
@using Nop.Core.Domain.Customers
@inject Nop.Core.IWebHelper webHelper
<ul class="header-links">
    @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.HeaderLinksBefore, additionalData = Model })
    <li class="user-link mobile-option">
        <span class="ico-user"><i class="far fa-user"></i></span>
        <ul class="user-wrapper mobile-overlay">
            @await Component.InvokeAsync("AdminHeaderLinks")
            @if (Model.IsAuthenticated)
            {
                <li><a href="@Url.RouteUrl("CustomerInfo")" class="ico-account">@T("Account.MyAccount")@*@Model.CustomerName*@</a></li>
            }
            else
            {
                var returnUrl = Context.Request.Query.TryGetValue("returnUrl", out var url) && !StringValues.IsNullOrEmpty(url)
                ? url.ToString()
                : webHelper.GetRawUrl(Context.Request);
                @if (Model.RegistrationType != UserRegistrationType.Disabled)
                {
                    <li><a href="@Url.RouteUrl("Register", new { returnUrl })" class="ico-register">@T("Account.Register")</a></li>
                }
            }
            @if (Model.AllowPrivateMessages)
            {
                <li class="d-lg-none">
                    <a href="@Url.RouteUrl("PrivateMessages", new { tab = "" })" class="ico-inbox">
                        <span class="inbox-label">@T("PrivateMessages.Inbox")@Model.UnreadPrivateMessages</span>
                    </a>
                </li>
            }
            @if (Model.WishlistEnabled)
            {
                <li class="d-lg-none">
                    <a href="@Url.RouteUrl("Wishlist")" class="ico-wishlist">
                        <span class="wishlist-label">@T("Wishlist")@T("Wishlist.HeaderQuantity", Model.WishlistItems)</span>
                    </a>
                </li>
            }
            @if (Model.IsAuthenticated)
            {
                <li><a href="@Url.RouteUrl("Logout")" class="ico-logout">@T("Account.Logout")</a></li>
            }
            else
            {
                var returnUrl = webHelper.GetRawUrl(Context.Request);
                <li><a href="@Url.RouteUrl("Login", new { returnUrl })" class="ico-login">@T("Account.Login")</a></li>
            }
        </ul>
    </li>
    @if (Model.AllowPrivateMessages)
    {
        <li class="inbox-link d-none d-lg-inline-block">
            <a href="@Url.RouteUrl("PrivateMessages", new { tab = "" })" class="ico-inbox">
                <i class="far fa-envelope"></i>
            </a>
        </li>
    }
    @if (Model.WishlistEnabled)
    {
        <li class="wishlist-link d-none d-lg-inline-block">
            <a href="@Url.RouteUrl("Wishlist")" class="ico-wishlist">
                <i class="far fa-heart">
                    <span class="wishlist-qty qty-label">@T("Wishlist.HeaderQuantity", Model.WishlistItems)</span>
                </i>
            </a>
        </li>
    }
    @if (Model.ShoppingCartEnabled)
    {
        <li class="topcart-link mobile-option">
            <span class="ico-cart">
                <i class="far fa-shopping-bag">
                    <span class="cart-qty qty-label">@T("ShoppingCart.HeaderQuantity", Model.ShoppingCartItems)</span>
                </i>
            </span>
            @await Component.InvokeAsync(typeof(FlyoutShoppingCartViewComponent))
        </li>
    }
    @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.HeaderLinksAfter, additionalData = Model })
    @if (Model.AllowPrivateMessages && !string.IsNullOrEmpty(Model.AlertMessage))
    {
        //new private message notification
        <script asp-location="Footer">
            $(function () {
                displayPopupNotification('@Html.Raw(JavaScriptEncoder.Default.Encode(Model.AlertMessage))', 'success', false);
            });
        </script>
    }
</ul>